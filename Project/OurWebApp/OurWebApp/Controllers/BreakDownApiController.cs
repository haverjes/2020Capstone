//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;
using OurWebApp.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OurWebApp.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class BreakDownAPIController : Controller
    {
        private IBreakDownAPIController _implementation;

        public BreakDownAPIController(IBreakDownAPIController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Fetch service tickets</summary>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <param name="sortBy">sort the results based on this field</param>
        /// <returns>search results matching criteria</returns>
        [HttpGet, Route("tickets", Name = "search Tickets")]
        public Task<IEnumerable<TicketStub>> Search_Tickets([FromQuery] int? skip, [FromQuery] int? limit, [FromQuery] string sortBy)
        {
            return _implementation.Search_TicketsAsync(skip, limit, sortBy);
        }

        /// <summary>Add Service Ticket</summary>
        /// <param name="body">Ticket item to add</param>
        /// <returns>item created</returns>
        [HttpPost, Route("tickets", Name = "addTicket")]
        public Task AddTicket([FromBody] TicketStub body)
        {
            return _implementation.AddTicketAsync(body);
        }

        /// <summary>Query Users</summary>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <returns>OK</returns>
        [HttpGet, Route("users", Name = "getUsers")]
        public Task<IEnumerable<UserStub>> GetUsers([FromQuery] int? skip, [FromQuery] int? limit)
        {
            return _implementation.GetUsersAsync(skip, limit);
        }

        /// <summary>Create a User</summary>
        /// <param name="body">Ticket item to add</param>
        /// <returns>OK</returns>
        [HttpPost, Route("users", Name = "createUser")]
        public Task CreateUser([FromBody] UserStub body)
        {
            return _implementation.CreateUserAsync(body);
        }

        /// <summary>Get specific user</summary>
        /// <returns>OK</returns>
        [HttpGet, Route("users/{userID}", Name = "getUserDetails")]
        public Task<UserDetails> GetUserDetails(string userID)
        {
            return _implementation.GetUserDetailsAsync(userID);
        }

        /// <returns>OK</returns>
        [HttpPut, Route("users/{userID}", Name = "updateUserDetails")]
        public Task UpdateUserDetails([FromBody] UserDetails body, string userID)
        {
            return _implementation.UpdateUserDetailsAsync(body, userID);
        }

        /// <summary>Get tickets for user</summary>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <param name="sortBy">sort the results based on this field</param>
        /// <returns>OK</returns>
        [HttpGet, Route("users/{userID}/tickets", Name = "getUserTickets")]
        public Task<IEnumerable<TicketStub>> GetUserTickets([FromQuery] int? skip, [FromQuery] int? limit, [FromQuery] string sortBy, string userID)
        {
            return _implementation.GetUserTicketsAsync(skip, limit, sortBy, userID);
        }

        /// <summary>Get Ticket Details</summary>
        /// <returns>OK</returns>
        [HttpGet, Route("tickets/{ticketID}", Name = "getTicketDetails")]
        public Task<TicketDetails> GetTicketDetails(string ticketID)
        {
            return _implementation.GetTicketDetailsAsync(ticketID);
        }

        /// <summary>Update Ticket</summary>
        /// <returns>OK</returns>
        [HttpPut, Route("tickets/{ticketID}", Name = "updateTicketDetails")]
        public Task UpdateTicketDetails([FromBody] TicketDetails body, string ticketID)
        {
            return _implementation.UpdateTicketDetailsAsync(body, ticketID);
        }

    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108