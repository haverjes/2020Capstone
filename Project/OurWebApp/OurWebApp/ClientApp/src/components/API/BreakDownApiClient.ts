/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class BreakDownAPIClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : ".";
    }

    /**
     * Fetch service tickets
     * @param skip (optional) number of records to skip for pagination
     * @param limit (optional) maximum number of records to return
     * @param sortBy (optional) sort the results based on this field
     * @return search results matching criteria
     */
    search_Tickets(skip: number | undefined, limit: number | undefined, sortBy: string | undefined): Promise<TicketStub[]> {
        let url_ = this.baseUrl + "/tickets?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch_Tickets(_response);
        });
    }

    protected processSearch_Tickets(response: Response): Promise<TicketStub[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(TicketStub.fromJS(item));
                }
                return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("bad input parameter", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketStub[]>(<any>null);
    }

    /**
     * Add Service Ticket
     * @param body (optional) Ticket item to add
     * @return item created
     */
    addTicket(body: TicketStub | undefined): Promise<void> {
        let url_ = this.baseUrl + "/tickets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        //console.log("aT:" + content_);
        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
        //console.log(options_);
        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTicket(_response);
        });
    }

    protected processAddTicket(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("invalid input, object invalid", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
                return throwException("an existing item already exists", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Query Users
     * @param skip (optional) number of records to skip for pagination
     * @param limit (optional) maximum number of records to return
     * @return OK
     */
    getUsers(skip: number | undefined, limit: number | undefined): Promise<UserStub[]> {
        let url_ = this.baseUrl + "/users?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<UserStub[]> {
        const status = response.status;
        console.log("TS Response: ");
        console.log(response);
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(UserStub.fromJS(item));
                }
                return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
                return throwException("an existing item already exists", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserStub[]>(<any>null);
    }

    /**
     * Create a User
     * @param body (optional) 
     * @return OK
     */
    createUser(body: UserStub | undefined): Promise<void> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        //console.log("cU:" + content_);
        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
        //console.log(options_);
        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<void> {
        const status = response.status;
        //console.log("TS Response: ");
        //console.log(response);
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get specific user
     * @return OK
     */
    getUserDetails(userID: string): Promise<UserDetails> {
        let url_ = this.baseUrl + "/users/{userID}";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined.");
        url_ = url_.replace("{userID}", encodeURIComponent("" + userID));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserDetails(_response);
        });
    }

    protected processGetUserDetails(response: Response): Promise<UserDetails> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserDetails.fromJS(resultData200);
                return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDetails>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateUserDetails(body: UserDetails | undefined, userID: string): Promise<void> {
        let url_ = this.baseUrl + "/users/{userID}";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined.");
        url_ = url_.replace("{userID}", encodeURIComponent("" + userID));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUserDetails(_response);
        });
    }

    protected processUpdateUserDetails(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get tickets for user
     * @param skip (optional) number of records to skip for pagination
     * @param limit (optional) maximum number of records to return
     * @param sortBy (optional) sort the results based on this field
     * @return OK
     */
    getUserTickets(userID: string, skip: number | undefined, limit: number | undefined, sortBy: string | undefined): Promise<TicketStub[]> {
        let url_ = this.baseUrl + "/users/{userID}/tickets?";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined.");
        url_ = url_.replace("{userID}", encodeURIComponent("" + userID));
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserTickets(_response);
        });
    }

    protected processGetUserTickets(response: Response): Promise<TicketStub[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(TicketStub.fromJS(item));
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketStub[]>(<any>null);
    }

    /**
     * Get Ticket Details
     * @return OK
     */
    getTicketDetails(ticketID: string): Promise<TicketDetails> {
        let url_ = this.baseUrl + "/tickets/{ticketID}";
        if (ticketID === undefined || ticketID === null)
            throw new Error("The parameter 'ticketID' must be defined.");
        url_ = url_.replace("{ticketID}", encodeURIComponent("" + ticketID));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTicketDetails(_response);
        });
    }

    protected processGetTicketDetails(response: Response): Promise<TicketDetails> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TicketDetails.fromJS(resultData200);
                return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketDetails>(<any>null);
    }

    /**
     * Update Ticket
     * @param body (optional) 
     * @return OK
     */
    updateTicketDetails(body: TicketDetails | undefined, ticketID: string): Promise<void> {
        let url_ = this.baseUrl + "/tickets/{ticketID}";
        if (ticketID === undefined || ticketID === null)
            throw new Error("The parameter 'ticketID' must be defined.");
        url_ = url_.replace("{ticketID}", encodeURIComponent("" + ticketID));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTicketDetails(_response);
        });
    }

    protected processUpdateTicketDetails(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
                return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class UserDetails implements IUserDetails {
    userID!: string;
    name!: string;
    /** Customer, Driver, or Dispatcher */
    role?: string;
    /** The last time the user logged in. */
    dateActive?: Date;
    /** Date the user was created.
 */
    dateCreated?: Date;

    constructor(data?: IUserDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.name = _data["name"];
            this.role = _data["role"];
            this.dateActive = _data["dateActive"] ? new Date(_data["dateActive"].toString()) : <any>undefined;
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDetails {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetails();
        result.init(data);
        return result;
    }

    toStub(): UserStub {
        let stub = new UserStub();

        stub.name = this.name;
        stub.userID = this.userID;
        stub.role = this.role;
        return stub;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["name"] = this.name;
        data["role"] = this.role;
        data["dateActive"] = this.dateActive ? this.dateActive.toISOString() : <any>undefined;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUserDetails {
    userID: string;
    name: string;
    /** Customer, Driver, or Dispatcher */
    role?: string;
    /** The last time the user logged in. */
    dateActive?: Date;
    /** Date the user was created.
 */
    dateCreated?: Date;
}

export class Vehicle implements IVehicle {
    vehicleID?: string;
    name?: string;
    type?: string;

    constructor(data?: IVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleID = _data["vehicleID"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Vehicle {
        data = typeof data === 'object' ? data : {};
        let result = new Vehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleID"] = this.vehicleID;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}

export interface IVehicle {
    vehicleID?: string;
    name?: string;
    type?: string;
}

export class TicketStub implements ITicketStub {
    ticketID?: string;
    customer?: UserStub;
    serviceLocation?: Location;
    driver?: UserStub;
    serviceType?: string;
    creationDate?: Date;

    constructor(data?: ITicketStub) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketID = _data["ticketID"];
            this.customer = _data["customer"] ? UserStub.fromJS(_data["customer"]) : <any>undefined;
            this.serviceLocation = _data["serviceLocation"] ? Location.fromJS(_data["serviceLocation"]) : <any>undefined;
            this.driver = _data["driver"] ? UserStub.fromJS(_data["driver"]) : <any>undefined;
            this.serviceType = _data["serviceType"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TicketStub {
        data = typeof data === 'object' ? data : {};
        let result = new TicketStub();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketID"] = this.ticketID;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["serviceLocation"] = this.serviceLocation ? this.serviceLocation.toJSON() : <any>undefined;
        data["driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
        data["serviceType"] = this.serviceType;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITicketStub {
    ticketID?: string;
    customer?: UserStub;
    serviceLocation?: Location;
    driver?: UserStub;
    serviceType?: string;
    creationDate?: Date;
}

export class Location implements ILocation {
    id?: string;
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
    gPS?: number[];

    constructor(data?: ILocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zip = _data["zip"];
            if (Array.isArray(_data["GPS"])) {
                this.gPS = [] as any;
                for (let item of _data["GPS"])
                    this.gPS!.push(item);
            }
        }
    }

    static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zip"] = this.zip;
        if (Array.isArray(this.gPS)) {
            data["GPS"] = [];
            for (let item of this.gPS)
                data["GPS"].push(item);
        }
        return data;
    }
}

export interface ILocation {
    id?: string;
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
    gPS?: number[];
}

export class UserStub implements IUserStub {
    userID!: string;
    /** Customer, Driver, or Dispatcher */
    role?: string;
    name!: string;

    constructor(data?: IUserStub) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.role = _data["role"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UserStub {
        data = typeof data === 'object' ? data : {};
        let result = new UserStub();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["role"] = this.role;
        data["name"] = this.name;
        return data;
    }
}

export interface IUserStub {
    userID: string;
    /** Customer, Driver, or Dispatcher */
    role?: string;
    name: string;
}

export class TicketDetails implements ITicketDetails {
    ticketID?: string;
    dateCreated!: Date;
    customer!: UserStub;
    status?: string;
    serviceLocation?: Location;
    serviceDistance?: number;
    comments?: string;
    serviceType!: string;
    custVehicle?: Vehicle;
    driver?: UserStub;
    serviceVehicle?: Vehicle;
    assignmentTime?: Date;
    dateUpdated?: Date;

    constructor(data?: ITicketDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customer = new UserStub();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketID = _data["ticketID"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
            this.customer = _data["customer"] ? UserStub.fromJS(_data["customer"]) : new UserStub();
            this.status = _data["status"];
            this.serviceLocation = _data["serviceLocation"] ? Location.fromJS(_data["serviceLocation"]) : <any>undefined;
            this.serviceDistance = _data["serviceDistance"];
            this.comments = _data["comments"];
            this.serviceType = _data["serviceType"];
            this.custVehicle = _data["custVehicle"] ? Vehicle.fromJS(_data["custVehicle"]) : <any>undefined;
            this.driver = _data["driver"] ? UserStub.fromJS(_data["driver"]) : <any>undefined;
            this.serviceVehicle = _data["serviceVehicle"] ? Vehicle.fromJS(_data["serviceVehicle"]) : <any>undefined;
            this.assignmentTime = _data["assignmentTime"] ? new Date(_data["assignmentTime"].toString()) : <any>undefined;
            this.dateUpdated = _data["dateUpdated"] ? new Date(_data["dateUpdated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TicketDetails {
        data = typeof data === 'object' ? data : {};
        let result = new TicketDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketID"] = this.ticketID;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["serviceLocation"] = this.serviceLocation ? this.serviceLocation.toJSON() : <any>undefined;
        data["serviceDistance"] = this.serviceDistance;
        data["comments"] = this.comments;
        data["serviceType"] = this.serviceType;
        data["custVehicle"] = this.custVehicle ? this.custVehicle.toJSON() : <any>undefined;
        data["driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
        data["serviceVehicle"] = this.serviceVehicle ? this.serviceVehicle.toJSON() : <any>undefined;
        data["assignmentTime"] = this.assignmentTime ? this.assignmentTime.toISOString() : <any>undefined;
        data["dateUpdated"] = this.dateUpdated ? this.dateUpdated.toISOString() : <any>undefined;
        return data;
    }

    
}

export interface ITicketDetails {
    ticketID?: string;
    dateCreated: Date;
    customer: UserStub;
    status?: string;
    serviceLocation?: Location;
    serviceDistance?: number;
    comments?: string;
    serviceType: string;
    custVehicle?: Vehicle;
    driver?: UserStub;
    serviceVehicle?: Vehicle;
    assignmentTime?: Date;
    dateUpdated?: Date;
}

export enum UserRole {
    Driver = "Driver",
    Customer = "Customer",
    Dispatcher = "Dispatcher",
}


export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}